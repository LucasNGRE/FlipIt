datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Table User
model User {
  id             Int                @id @default(autoincrement())  // Changement ici pour Int
  firstName      String
  lastName       String
  email          String          @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  authProviderId String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  // Relations
  products            Product[]
  offers              Offer[]
  transactionsBuyer   Transaction[] @relation("BuyerTransactions")
  transactionsSeller  Transaction[] @relation("SellerTransactions")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Message Message[]
}

model Message {
  id        Int     @id @default(autoincrement())
  content   String
  timestamp DateTime @default(now())
  sellerId  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  buyer     User     @relation(fields: [buyerId], references: [id])
  buyerId   Int
}

model Product {
  id          Int             @id @default(autoincrement())
  userId      Int
  title       String
  description String?
  price       Decimal          @db.Decimal(10, 2)
  condition   Condition        @default(Neuf)
  brand       String?
  size        String?

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      ProductImage[]   // Chaque produit peut avoir plusieurs images
  offers      Offer[]          // Relation inverse avec Offer
  messages     Message[]       // Add this line for back-relation to Message
  transactions Transaction[]   // Add this line for back-relation to Transaction
}

model Offer {
  id          Int        @id @default(autoincrement())  // Changement ici pour Int
  productId   Int
  buyerId     Int
  offerPrice  Decimal     @db.Decimal(10, 2)
  status      OfferStatus      @default(pending)  // Status: pending, accepted, rejected
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  // Relations
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyer       User        @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  }

model Transaction {
  id          Int        @id @default(autoincrement())  // Changement ici pour Int
  productId   Int
  sellerId    Int
  buyerId     Int
  finalPrice  Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  // Relations
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  seller      User        @relation("SellerTransactions", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer       User        @relation("BuyerTransactions", fields: [buyerId], references: [id], onDelete: Cascade)
}
// Table Account (Déjà présente)
model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

// Table Session (Déjà présente)
model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Table VerificationToken (Déjà présente)
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}

// Table Authenticator (Déjà présente)
model Authenticator {
  credentialID         String  @unique
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}

// Modèle ProductImage pour gérer les images des produits
model ProductImage {
  id        Int      @id @default(autoincrement())  // ID auto-incrémenté
  productId Int
  url       String   // URL de l'image (hébergée sur un service de stockage externe)
  altText   String?  // Texte alternatif pour l'accessibilité
   // Relation avec Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Condition {
  Neuf
  Comme_neuf
  Bon_etat
  Moyen_etat
  Mauvais_etat
}

enum OfferStatus {
  pending
  accepted
  rejected
}