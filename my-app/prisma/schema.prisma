model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  // username?
  email     String   @unique
  password  String?
  image     String?
  orders    Order[]
  cart      Cart?
  items     Item?
  emailVerified DateTime?
  authProviderId String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  items     OrderItem[]
  total     Float
  createdAt DateTime @default(now())

  @@index([userId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique   // Make this unique to enforce the one-to-one relationship
  items     CartItem[]
}


model OrderItem {
  id        Int    @id @default(autoincrement())
  order     Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  item      Item   @relation(fields: [itemId], references: [id])
  itemId    Int
  quantity  Int
}

model CartItem {
  id        Int    @id @default(autoincrement())
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  item      Item   @relation(fields: [itemId], references: [id])
  itemId    Int
  quantity  Int
}

model Item {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id]) // Item posted by the user
  userId    Int      @unique
  title     String
  description String
  price     Float
  imageUrl  String  
  brand     String
  category  String
  condition String
  createdAt DateTime @default(now())

  cartItems CartItem[]
  orderItems OrderItem[]
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD"
  theme    = "simple"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model Account {
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  user                 User   @relation(fields: [userId], references: [id])
  userId               Int
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  @@id([userId, credentialID])
}